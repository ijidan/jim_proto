// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto_build

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	SendTextMessage(ctx context.Context, in *SendTextMessageRequest, opts ...grpc.CallOption) (*SendTextMessageResponse, error)
	SendLocationMessage(ctx context.Context, in *SendLocationMessageRequest, opts ...grpc.CallOption) (*SendLocationMessageResponse, error)
	SendFceMessage(ctx context.Context, in *SendFaceMessageRequest, opts ...grpc.CallOption) (*SendFaceMessageResponse, error)
	SendSoundMessage(ctx context.Context, in *SendSoundMessageRequest, opts ...grpc.CallOption) (*SendSoundMessageResponse, error)
	SendVideoMessage(ctx context.Context, in *SendVideoMessageRequest, opts ...grpc.CallOption) (*SendVideoMessageResponse, error)
	SendImageMessage(ctx context.Context, in *SendImageMessageRequest, opts ...grpc.CallOption) (*SendImageMessageResponse, error)
	SendFileMessage(ctx context.Context, in *SendFileMessageRequest, opts ...grpc.CallOption) (*SendFileMessageResponse, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) SendTextMessage(ctx context.Context, in *SendTextMessageRequest, opts ...grpc.CallOption) (*SendTextMessageResponse, error) {
	out := new(SendTextMessageResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/SendTextMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SendLocationMessage(ctx context.Context, in *SendLocationMessageRequest, opts ...grpc.CallOption) (*SendLocationMessageResponse, error) {
	out := new(SendLocationMessageResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/SendLocationMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SendFceMessage(ctx context.Context, in *SendFaceMessageRequest, opts ...grpc.CallOption) (*SendFaceMessageResponse, error) {
	out := new(SendFaceMessageResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/SendFceMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SendSoundMessage(ctx context.Context, in *SendSoundMessageRequest, opts ...grpc.CallOption) (*SendSoundMessageResponse, error) {
	out := new(SendSoundMessageResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/SendSoundMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SendVideoMessage(ctx context.Context, in *SendVideoMessageRequest, opts ...grpc.CallOption) (*SendVideoMessageResponse, error) {
	out := new(SendVideoMessageResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/SendVideoMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SendImageMessage(ctx context.Context, in *SendImageMessageRequest, opts ...grpc.CallOption) (*SendImageMessageResponse, error) {
	out := new(SendImageMessageResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/SendImageMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SendFileMessage(ctx context.Context, in *SendFileMessageRequest, opts ...grpc.CallOption) (*SendFileMessageResponse, error) {
	out := new(SendFileMessageResponse)
	err := c.cc.Invoke(ctx, "/message.MessageService/SendFileMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	SendTextMessage(context.Context, *SendTextMessageRequest) (*SendTextMessageResponse, error)
	SendLocationMessage(context.Context, *SendLocationMessageRequest) (*SendLocationMessageResponse, error)
	SendFceMessage(context.Context, *SendFaceMessageRequest) (*SendFaceMessageResponse, error)
	SendSoundMessage(context.Context, *SendSoundMessageRequest) (*SendSoundMessageResponse, error)
	SendVideoMessage(context.Context, *SendVideoMessageRequest) (*SendVideoMessageResponse, error)
	SendImageMessage(context.Context, *SendImageMessageRequest) (*SendImageMessageResponse, error)
	SendFileMessage(context.Context, *SendFileMessageRequest) (*SendFileMessageResponse, error)
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) SendTextMessage(context.Context, *SendTextMessageRequest) (*SendTextMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTextMessage not implemented")
}
func (UnimplementedMessageServiceServer) SendLocationMessage(context.Context, *SendLocationMessageRequest) (*SendLocationMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLocationMessage not implemented")
}
func (UnimplementedMessageServiceServer) SendFceMessage(context.Context, *SendFaceMessageRequest) (*SendFaceMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFceMessage not implemented")
}
func (UnimplementedMessageServiceServer) SendSoundMessage(context.Context, *SendSoundMessageRequest) (*SendSoundMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSoundMessage not implemented")
}
func (UnimplementedMessageServiceServer) SendVideoMessage(context.Context, *SendVideoMessageRequest) (*SendVideoMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVideoMessage not implemented")
}
func (UnimplementedMessageServiceServer) SendImageMessage(context.Context, *SendImageMessageRequest) (*SendImageMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendImageMessage not implemented")
}
func (UnimplementedMessageServiceServer) SendFileMessage(context.Context, *SendFileMessageRequest) (*SendFileMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFileMessage not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_SendTextMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTextMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SendTextMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/SendTextMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SendTextMessage(ctx, req.(*SendTextMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SendLocationMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendLocationMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SendLocationMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/SendLocationMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SendLocationMessage(ctx, req.(*SendLocationMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SendFceMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFaceMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SendFceMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/SendFceMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SendFceMessage(ctx, req.(*SendFaceMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SendSoundMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSoundMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SendSoundMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/SendSoundMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SendSoundMessage(ctx, req.(*SendSoundMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SendVideoMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVideoMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SendVideoMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/SendVideoMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SendVideoMessage(ctx, req.(*SendVideoMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SendImageMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendImageMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SendImageMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/SendImageMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SendImageMessage(ctx, req.(*SendImageMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SendFileMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFileMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SendFileMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.MessageService/SendFileMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SendFileMessage(ctx, req.(*SendFileMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTextMessage",
			Handler:    _MessageService_SendTextMessage_Handler,
		},
		{
			MethodName: "SendLocationMessage",
			Handler:    _MessageService_SendLocationMessage_Handler,
		},
		{
			MethodName: "SendFceMessage",
			Handler:    _MessageService_SendFceMessage_Handler,
		},
		{
			MethodName: "SendSoundMessage",
			Handler:    _MessageService_SendSoundMessage_Handler,
		},
		{
			MethodName: "SendVideoMessage",
			Handler:    _MessageService_SendVideoMessage_Handler,
		},
		{
			MethodName: "SendImageMessage",
			Handler:    _MessageService_SendImageMessage_Handler,
		},
		{
			MethodName: "SendFileMessage",
			Handler:    _MessageService_SendFileMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
